import java.util.*;

public class Graph{
	int V,E;
	Edge[] edge;
	
	class Edge{
		int src;
		int dest;
	}
	
	class subset{
		int parent;
		int rank;
	}
	
	Graph(int v,int e){
		V=v;
		E=e;
		edge = new Edge[E];
		for(int i=0;i<E;i++)
			edge[i]=new Edge();
	}
	
	int find(subset[] subsets,int i) {
		if(subsets[i].parent!=i)
			subsets[i].parent=find(subsets,subsets[i].parent);
		return subsets[i].parent;
	}
	
	void union(subset[] subsets,int x,int y) {
		int xroot=find(subsets,x);
		int yroot=find(subsets,y);
		if(subsets[xroot].rank<subsets[yroot].rank)
			subsets[xroot].parent=yroot;
		else if(subsets[yroot].rank<subsets[xroot].rank)
			subsets[yroot].parent=xroot;
		else {
			subsets[xroot].parent=yroot;
			subsets[yroot].rank++;
		}
	}
	
	int isCycle(Graph graph) {
		int V=graph.V;
		int E=graph.E;
		subset[] subsets=new subset[V];
		for(int i=0;i<V;i++) {
			subsets[i]=new subset();
			subsets[i].parent=i;
			subsets[i].rank=0;
		}
		for(int i=0;i<E;i++) {
			int x=find(subsets,graph.edge[i].src);
			int y=find(subsets,graph.edge[i].dest);
			if(x==y)
				return 1;
			union(subsets,x,y);
		}
	return 0;
	}
	
	public static void main(String[] args) {
		int V,E;
				
		Scanner scan = new Scanner(System.in);
		System.out.println("Enter the no. of Vertices: ");
		V=scan.nextInt();
		System.out.println("Enter the no. of Edges: ");
		E=scan.nextInt();
		
		Graph graph = new Graph(V,E);
		
		for(int i=0;i<E;i++) {
			System.out.println("Enter the Source of Edge "+(i+1)+": ");
			graph.edge[i].src=scan.nextInt();
			System.out.println("Enter the Destination of Edge "+(i+1)+": ");
			graph.edge[i].dest=scan.nextInt();
		}
		
		scan.close();
				
		if(graph.isCycle(graph)==1)
		System.out.println("Graph contains a cycle");
		else
		System.out.println("Graph doesn't contain a cycle");	
			
	}
}
