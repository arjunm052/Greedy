import java.util.*;

public class Graph{
	int V,E;
	Edge[] edge;
	
	class Edge implements Comparable<Edge>{
		int src,dest,weight;
		public int compareTo(Edge compareEdge) {
			return this.weight - compareEdge.weight;
		}
	}
	
	class subset{
		int parent,rank;
	}
	
	Graph(int v,int e){
		V=v;
		E=e;
		edge=new Edge[E];
		for(int i=0;i<E;i++)
			edge[i]=new Edge();
	}
	
	int find(subset[] subsets,int i) {
		if(subsets[i].parent!=i)
			subsets[i].parent=find(subsets,subsets[i].parent);
		return subsets[i].parent;
	}
	
	void union(subset[] subsets,int x,int y) {
		int xroot=find(subsets,x);
		int yroot=find(subsets,y);
		if(subsets[xroot].rank<subsets[yroot].rank)
			subsets[xroot].parent=yroot;
		else if(subsets[yroot].rank<subsets[xroot].rank)
			subsets[yroot].parent=xroot;
		else {
			subsets[xroot].parent=yroot;
			subsets[yroot].rank++;
		}
	}
	
	void KruskalMST() {
				
		Edge[] result = new Edge[V];
		int e=0;
		int i=0;
		
		for(int j=0;j<V;j++)
			result[j]=new Edge();
		
		Arrays.sort(edge);
		subset[] subsets = new subset[E];
		for(int j=0;j<E;j++) {
			subsets[j]=new subset();
			subsets[j].parent=j;
			subsets[j].rank=0;
		}
		
		while(e<V-1) {
			Edge next_edge = new Edge();
			next_edge = edge[i++];
			
			int x = find(subsets,next_edge.src);
			int y = find(subsets,next_edge.dest);
			
			if(x!=y) {
				result[e++]=next_edge;
				union(subsets,x,y);
			}
			
		}
			 System.out.println("Following are the edges in " +  
                     "the constructed MST"); 
			 for (i = 0; i < e; ++i) 
				 System.out.println(result[i].src+" -- " +  
						 result[i].dest+" == " + result[i].weight); 
		}
		
	
	
	public static void main(String[] args) {
		int V,E;
		
		Scanner scan = new Scanner(System.in);
		System.out.println("Enter the no. of Vertices: ");
		V=scan.nextInt();
		System.out.println("Enter the no. of Edges: ");
		E=scan.nextInt();
		
		Graph graph = new Graph(V,E);
		
		for(int i=0;i<E;i++) {
			System.out.println("Enter the Source of Edge "+(i+1)+": ");
			graph.edge[i].src=scan.nextInt();
			System.out.println("Enter the Destination of Edge "+(i+1)+": ");
			graph.edge[i].dest=scan.nextInt();
			System.out.println("Enter the Weight of Edge "+(i+1)+": ");
			graph.edge[i].weight=scan.nextInt();
		}
		
		scan.close();
				
		graph.KruskalMST();	}
	
}
